openapi: 3.0.2

info:
  version: 1.0.0
  title: Order Tracking API
  description:
    The purpose of this API is to provide support for CSRs to be able to
    create, retrieve, update or delete information relating to customers,
    orders and products.

# NEED SERVER URL/INFORMATION
servers: 
  - url: 

security:
  - BasicAuth: []

paths:
  /customers:

    get:
      tags:
        - Customers
      summary: Return all the customers
      description: Return all of the customers in our database
      responses:
        '200':
          description: An array of customers in JSON format
          content:
            application/json:
              schema:
                $ref: '#/.../Customers'
    
    post:
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../Customer'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created

  /customers/{id}:

    get:
      tags:
        - Customers
      summary: Return a single customer
      description: Return a customer where customerId equals id
      parameters:
      - name: id
        in: path
        required: true
        description: The customerId requested by user
          schema:
            type: string
      responses:
        '200':
          description: Customer info in JSON format
          content:
            application/json:
              schema:
                $ref: '#/.../Customer'
      
    put:
      tags:
        - Customers
      summary: Update a customer
      description: A full replacement of customer data with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The customerId requested by the user
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../Customer'
      responses:
        '200':
          description: Updated the specific customer completely

    delete:
      tags:
        - Customers
      summary: Deletes a customer
      description: Deletes a customer with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The customerId requested by the user
        schema:
          type: string
      responses:
        '204':
          description: The resource was deleted successfully

  /orders:

    get:
      tags:
        - Orders
      summary: Return all of the orders
      description: Return all of the orders in the database
      responses:
        '200':
          description: An array of orders in JSON format
          content:
            application/json:
              schema:
                $ref: '#/.../Orders'

    post:
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../Order'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created

  /orders/{id}:

    get:
      tags:
        - Orders
      summary: Return an order
      description: Return an order where orderId equals id
      parameters:
      - name: id
        in: path
        required: true
        description: The orderId requested by the user
        schema:
          type: string
        responses:
          '200':
            description: An order in JSON format
            content:
              application/json:
                schema:
                  $ref: '#/.../Order'

    put: 
      tags:
        - Orders
      summary: Update an order
      description: A full replacement of order data with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The orderId requested by the user
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../Order'
      responses:
        '200':
          description: Updated the specific order completely

    patch:
      tags:
        - Orders
      summary: Update an order
      description: A partial replacement of order data with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The orderId requested by the user
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../PatchOrder'
      responses:
        '200':
          description: Updated an order partially

    delete:
      tags:
        - Orders
      summary: Deletes an order
      description: Deletes an order with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The orderId requested by the user
        schema:
          type: string
      responses:
        '204':
          description: The resource was deleted successfully

  /products:

    get:
      tags:
        - Products
      summary: Return all products
      description: Return all of the products in the database
      responses:
        '200':
          description: An array of products in JSON format
          content:
            application/json:
              schema:
                $ref: '#/.../Products'

  /products/{id}:

    get:
      tags:
        - Products
      summary: Return a product
      description: Return a product where productId equals id
      parameters:
      - name: id
        in: path
        required: true
        description: The product Id requested by the user
        schema:
          type: string
      responses:
        '200':
          description: Product info in JSON format
          content:
            application/json:
              schema:
                $ref: '#/.../Product'

    put:
      tags:
        - Products
      summary: Update a product
      description: A full replacement of product data with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The productId requested by the user
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../Product'
      responses:
        '200':
          description: Updated the specific product completely

    patch:
      tags:
        - Products
      summary: Update a product
      description: A partial replacement of product data with a given id
      parameters:
      - name: id
        in: path
        required: true
        description: The productId requested by the user
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/.../PatchProduct'
      responses:
        '200':
          description: Updated a product partially

components:
  schemas:
    Customers:
      description: "An array of Customer objects."
      type: array
      items:
        $ref: '#/.../Customer'
      example: [
        {
          "firstName": "Phillip",
          "middleName": "Jason",
          "lastName": "Fry",
          "phone": "8491237583",
          "email": "pjfry@gmail.com",
          "address": "125 Main Street",
          "city": "New York",
          "region": "United States",
          "zip": "10001",
          "customerNotes": "Prefers express delivery",
          "customerId": 1
        },
        {
          "firstName": "James",
          "middleName": "Paul",
          "lastName": "McCartney",
          "phone": "1517282497",
          "email": "thebeatles@gmail.com",
          "address": "15 Abbey Road",
          "city": "London",
          "region": "United Kingdom",
          "zip": "5211",
          "customerNotes": "N/A",
          "customerId": 2
        },
        {
          "firstName": "Sponge",
          "middleName": "Bob",
          "lastName": "SquarePants",
          "phone": "1111111111",
          "email": "sbsquarep@gmail.com",
          "address": "142 West Street",
          "city": "Montreal",
          "region": "Canada",
          "zip": "514",
          "customerNotes": "N/A",
          "customerId": 3
        }
      ]
    
    Customer:
      type: object
      properties:
        firstName:
          type: string
          description: "First name of customer"
        middleName:
          type: string
          description: "Middle name of customer"
        lastName:
          type: string
          description: "Last name of customer"
        phone:
          type: string
          description: "Phone number of customer"
        email:
          type: string
          description: "Email address of customer"
        address:
          type: string
          description: "Address of customer"
        city:
          type: string
          description: "City the customer is from"
        region:
          type: string
          description: "Region the customer is in"
        zip:
          type: string
          description: "Zip code for customer's location"
        customerNotes:
          type: string
          description: "Notes about the customer"
        customerId:
          type: integer
          description: "The customer's id"
      required:
        - firstName
        - middleName
        - lastName
        - phone
        - email
        - address
        - city
        - region
        - zip
        - customerId
      example:
        firstName: "Sponge"
        middleName: "Bob"
        lastName: "SquarePants"
        phone: "1111111111"
        email: "sbsquarep@gmail.com"
        address: "142 West Street"
        city: "Montreal"
        region: "Canada"
        zip: "514"
        customerNotes: "N/A"
        customerId: 3

    Orders:
      description: "An array of Order objects."
      type: array
      items:
        $ref: '#/.../Order'
      example: [
        {
          "orderId": 1,
          "datetimeOrderPlaced": "2022-03-10",
          "datetimeOrderFulfilled": "2022-03-11",
          "totalOrderPrice": 42.99,
          "orderNotes": "Expedited Shipping",
          "customerId": 1,
          "orderStatusCode": 2 
        },
        {
          "orderId": 2,
          "datetimeOrderPlaced": "2022-03-16",
          "datetimeOrderFulfilled": "2022-03-17",
          "totalOrderPrice": 9.99,
          "orderNotes": Expedited Shipping,
          "customerId": 1,
          "orderStatusCode": 2
        },
        {
          "orderId": 3,
          "datetimeOrderPlaced": "2022-03-01",
          "datetimeOrderFulfilled": "2022-03-02",
          "totalOrderPrice": 75.99,
          "orderNotes": N/A,
          "customerId": 2,
          "orderStatusCode": 1 
        }
      ]

    Order:
      type: object
      properties:
        orderId:
          type: integer
          description: "The order id"
        datetimeOrderPlaced:
          type: string
          format: date
          description: "The date the order was placed"
        datetimeOrderFulfilled:
          type: string
          format: date
          description: "The date the order was fulfilled"
        totalOrderPrice:
          type: number
          format: double
          description: "The total price of the order"
        orderNotes:
          type: string
          description: "Notes about the order"
        customerId:
          type: integer
          description: "The id of the customer who placed the order"
        orderStatusCode:
          type: integer
          description: "The status code of the order"
      required:
        - orderId
        - datetimeOrderPlaced
        - datetimeOrderFulfilled
        - totalOrderPrice
        - customerId
        - orderStatusCode
      example:
        orderId: 3
        datetimeOrderPlaced: "2022-03-01"
        datetimeOrderFulfilled: "2022-03-02"
        totalOrderPrice: 75.99
        orderNotes: "N/A"
        customerId: 2
        orderStatusCode: 1

    PatchOrder:
      type: object
      properties:
        orderId:
          type: integer
          description: "The order id"
        datetimeOrderPlaced:
          type: string
          format: date
          description: "The date the order was placed"
        datetimeOrderFulfilled:
          type: string
          format: date
          description: "The date the order was fulfilled"
        totalOrderPrice:
          type: number
          format: double
          description: "The total price of the order"
        orderNotes:
          type: string
          description: "Notes about the order"
        customerId:
          type: integer
          description: "The id of the customer who placed the order"
        orderStatusCode:
          type: integer
          description: "The status code of the order"

    Products:
      description: "An array of Product objects."
      type: array
      items:
        $ref: '#/.../Product'
      example: [
        {
          "productId": 1,
          "productSKU": "TS123456",
          "productPrice": 19.99,
          "productName": "Red T-Shirt",
          "productQuantity": 1,
          "productDescription": "A comfortable T-Shirt" 
        },
        {
          "productId": 2,
          "productSKU": "TS513426",
          "productPrice": 39.99,
          "productName": "Blue Winter Jacket",
          "productQuantity": 2,
          "productDescription": "A padded winter jacket" 
        },
        {
          "productId": 3,
          "productSKU": "TS153232",
          "productPrice": 9.99,
          "productName": "Fur Gloves",
          "productQuantity": 5,
          "productDescription": "Fur lined winter gloves" 
        }
      ]

    Product:
      type: object
      properties:
        productId:
          type: integer
          description: "The product Id"
        productSKU:
          type: string
          description: "The product's SKU code"
        productPrice:
          type: number
          format: double
          description: "The listed price of the product"
        productName:
          type: string
          description: "The name of the product"
        productQuantity:
          type: integer
          description: "The quantity of this product"
        productDescription:
          type: string
          description: "The description of the product"
      required:
        - productId
        - productSKU
        - productPrice
        - productName
        - productQuantity
      example:
        productId: 3
        productSKU: "TS153232"
        productPrice: 9.99
        productName: "Fur Gloves"
        productQuantity: 5
        productDescription: "Fur lined winter gloves"

    PatchProduct:
      type: object
      properties:
        productId:
          type: integer
          description: "The product Id"
        productSKU:
          type: string
          description: "The product's SKU code"
        productPrice:
          type: number
          format: double
          description: "The listed price of the product"
        productName:
          type: string
          description: "The name of the product"
        productQuantity:
          type: integer
          description: "The quantity of this product"
        productDescription:
          type: string
          description: "The description of the product"

  parameters:
    DraftOrders:

    LimitByOrderPrice:

    PageLimit:

    PageOffset:    